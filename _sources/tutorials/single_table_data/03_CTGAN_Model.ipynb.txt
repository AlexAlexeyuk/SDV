{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CTGAN Model\n",
    "\n",
    "In this guide we present the `CTGAN` model: A GAN-based Deep Learning data synthesizer that can generate synthetic tabular data with high  fidelity. Based on our [CTGAN Library](https://github.com/sdv-dev/CTGAN).\n",
    "\n",
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**NOTE**\n",
    "\n",
    "During this guide we will walk you through the specific functionalities of the `CTGAN` model.\n",
    "For a more generic view of the SDV Tabular Models and their common functionalities, please visit\n",
    "the [Tabular Models](01_Tabular_Models.ipynb) guide.\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling Tabular data using Conditional GAN\n",
    "\n",
    "**CTGAN** is a Deep Learning based data syntheziser that uses Generative Adversarial Networks\n",
    "to generate tabular data and which was presented at the NeurIPS 2020 conference by the\n",
    "paper titled [Modeling Tabular data using Conditional GAN](https://arxiv.org/abs/1907.00503).\n",
    "For more details about it, please read the linked paper and visit the [CTGAN library](\n",
    "https://github.com/sdv-dev/CTGAN).\n",
    "\n",
    "Let's now discover how to learn a dataset and later on generate synthetic data with the same\n",
    "format and statistical properties by using the `CTGAN` class from SDV."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-warning\">\n",
    "\n",
    "WARNING\n",
    "\n",
    "In order to follow this guide you need to have `ctgan` installed on your system.\n",
    "If you have not done it yet, please install `ctgan` now by executing the command\n",
    "`pip install sdv[ctgan]` in a terminal.\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introducing CTGAN\n",
    "\n",
    "We will start by loading one of our demo datasets, the `student_placements`, which we used during\n",
    "[Tabular Models](01_Tabular_Models.ipynb) guide."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "# Setup logging and warnings - change ERROR to INFO for increased verbosity\n",
    "import logging;\n",
    "logging.basicConfig(level=logging.ERROR)\n",
    "\n",
    "logging.getLogger().setLevel(level=logging.WARNING)\n",
    "logging.getLogger('sdv').setLevel(level=logging.ERROR)\n",
    "\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>student_id</th>\n",
       "      <td>155368</td>\n",
       "      <td>155369</td>\n",
       "      <td>155370</td>\n",
       "      <td>155371</td>\n",
       "      <td>155372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <td>M</td>\n",
       "      <td>M</td>\n",
       "      <td>M</td>\n",
       "      <td>M</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>second_perc</th>\n",
       "      <td>67</td>\n",
       "      <td>79.33</td>\n",
       "      <td>65</td>\n",
       "      <td>56</td>\n",
       "      <td>85.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high_perc</th>\n",
       "      <td>91</td>\n",
       "      <td>78.33</td>\n",
       "      <td>68</td>\n",
       "      <td>52</td>\n",
       "      <td>73.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>high_spec</th>\n",
       "      <td>Commerce</td>\n",
       "      <td>Science</td>\n",
       "      <td>Arts</td>\n",
       "      <td>Science</td>\n",
       "      <td>Commerce</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>degree_perc</th>\n",
       "      <td>58</td>\n",
       "      <td>77.48</td>\n",
       "      <td>64</td>\n",
       "      <td>52</td>\n",
       "      <td>73.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>degree_type</th>\n",
       "      <td>Sci&amp;Tech</td>\n",
       "      <td>Sci&amp;Tech</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>Sci&amp;Tech</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>work_experience</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>experience_years</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>employability_perc</th>\n",
       "      <td>55</td>\n",
       "      <td>86.5</td>\n",
       "      <td>75</td>\n",
       "      <td>66</td>\n",
       "      <td>96.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mba_spec</th>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>Mkt&amp;Fin</td>\n",
       "      <td>Mkt&amp;Fin</td>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>Mkt&amp;Fin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mba_perc</th>\n",
       "      <td>58.8</td>\n",
       "      <td>66.28</td>\n",
       "      <td>57.8</td>\n",
       "      <td>59.43</td>\n",
       "      <td>55.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>salary</th>\n",
       "      <td>27000</td>\n",
       "      <td>20000</td>\n",
       "      <td>25000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>placed</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>start_date</th>\n",
       "      <td>2020-01-08 00:00:00</td>\n",
       "      <td>2020-01-15 00:00:00</td>\n",
       "      <td>2020-01-30 00:00:00</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-01-16 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>end_date</th>\n",
       "      <td>2020-04-17 00:00:00</td>\n",
       "      <td>2020-04-02 00:00:00</td>\n",
       "      <td>2020-04-27 00:00:00</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-04-28 00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>duration</th>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      0                    1  \\\n",
       "student_id                       155368               155369   \n",
       "gender                                M                    M   \n",
       "second_perc                          67                79.33   \n",
       "high_perc                            91                78.33   \n",
       "high_spec                      Commerce              Science   \n",
       "degree_perc                          58                77.48   \n",
       "degree_type                    Sci&Tech             Sci&Tech   \n",
       "work_experience                   False                 True   \n",
       "experience_years                      0                    1   \n",
       "employability_perc                   55                 86.5   \n",
       "mba_spec                         Mkt&HR              Mkt&Fin   \n",
       "mba_perc                           58.8                66.28   \n",
       "salary                            27000                20000   \n",
       "placed                             True                 True   \n",
       "start_date          2020-01-08 00:00:00  2020-01-15 00:00:00   \n",
       "end_date            2020-04-17 00:00:00  2020-04-02 00:00:00   \n",
       "duration                            3.0                  3.0   \n",
       "\n",
       "                                      2         3                    4  \n",
       "student_id                       155370    155371               155372  \n",
       "gender                                M         M                    M  \n",
       "second_perc                          65        56                 85.8  \n",
       "high_perc                            68        52                 73.6  \n",
       "high_spec                          Arts   Science             Commerce  \n",
       "degree_perc                          64        52                 73.3  \n",
       "degree_type                   Comm&Mgmt  Sci&Tech            Comm&Mgmt  \n",
       "work_experience                   False     False                False  \n",
       "experience_years                      0         0                    0  \n",
       "employability_perc                   75        66                 96.8  \n",
       "mba_spec                        Mkt&Fin    Mkt&HR              Mkt&Fin  \n",
       "mba_perc                           57.8     59.43                 55.5  \n",
       "salary                            25000       NaN                42500  \n",
       "placed                             True     False                 True  \n",
       "start_date          2020-01-30 00:00:00       NaT  2020-01-16 00:00:00  \n",
       "end_date            2020-04-27 00:00:00       NaT  2020-04-28 00:00:00  \n",
       "duration                            3.0       NaN                  3.0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sdv.demo import load_tabular_demo\n",
    "\n",
    "data = load_tabular_demo('student_placements')\n",
    "data.head().T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we learned in the [Tabular Models](01_Tabular_Models.ipynb) guide, the first\n",
    "step that we need to do in order to use tabular model like `CTGAN` is to import\n",
    "its class and create an instance of it passing the details about our data.\n",
    "\n",
    "In this case, we would only need to indicate that the primary key is the `student_id`\n",
    "field and call its `fit` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sdv.tabular import CTGAN\n",
    "\n",
    "model = CTGAN(\n",
    "    primary_key='student_id',\n",
    ")\n",
    "model.fit(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After this is done, we can simply call its `sample` method to obtain\n",
    "syntehtically generated data from it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_data = model.sample(len(data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>student_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>second_perc</th>\n",
       "      <th>high_perc</th>\n",
       "      <th>high_spec</th>\n",
       "      <th>degree_perc</th>\n",
       "      <th>degree_type</th>\n",
       "      <th>work_experience</th>\n",
       "      <th>experience_years</th>\n",
       "      <th>employability_perc</th>\n",
       "      <th>mba_spec</th>\n",
       "      <th>mba_perc</th>\n",
       "      <th>salary</th>\n",
       "      <th>placed</th>\n",
       "      <th>start_date</th>\n",
       "      <th>end_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>55.673440</td>\n",
       "      <td>35.385329</td>\n",
       "      <td>Science</td>\n",
       "      <td>77.910653</td>\n",
       "      <td>Sci&amp;Tech</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>67.267717</td>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>57.796472</td>\n",
       "      <td>26961.957338</td>\n",
       "      <td>True</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-03-30 11:29:56.959432960</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>M</td>\n",
       "      <td>57.898309</td>\n",
       "      <td>53.293088</td>\n",
       "      <td>Commerce</td>\n",
       "      <td>67.198933</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>73.089297</td>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>66.888349</td>\n",
       "      <td>NaN</td>\n",
       "      <td>True</td>\n",
       "      <td>2020-02-16 00:03:24.176280576</td>\n",
       "      <td>NaT</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>M</td>\n",
       "      <td>59.027578</td>\n",
       "      <td>37.784593</td>\n",
       "      <td>Science</td>\n",
       "      <td>66.922251</td>\n",
       "      <td>Sci&amp;Tech</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>74.090553</td>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>66.220386</td>\n",
       "      <td>17684.222919</td>\n",
       "      <td>True</td>\n",
       "      <td>2019-12-19 21:22:16.301072128</td>\n",
       "      <td>2020-12-08 09:33:28.105755136</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>M</td>\n",
       "      <td>50.055418</td>\n",
       "      <td>38.609832</td>\n",
       "      <td>Arts</td>\n",
       "      <td>78.842213</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>95.951477</td>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>73.716787</td>\n",
       "      <td>32224.660930</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-01-23 14:08:04.391622912</td>\n",
       "      <td>2020-03-10 22:05:46.568782592</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>F</td>\n",
       "      <td>49.980109</td>\n",
       "      <td>60.661264</td>\n",
       "      <td>Commerce</td>\n",
       "      <td>76.132861</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>55.252820</td>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>60.326783</td>\n",
       "      <td>28482.033544</td>\n",
       "      <td>True</td>\n",
       "      <td>2019-12-12 04:15:40.063726592</td>\n",
       "      <td>2020-10-19 10:05:23.907214336</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   student_id gender  second_perc  high_perc high_spec  degree_perc  \\\n",
       "0           0      F    55.673440  35.385329   Science    77.910653   \n",
       "1           1      M    57.898309  53.293088  Commerce    67.198933   \n",
       "2           2      M    59.027578  37.784593   Science    66.922251   \n",
       "3           3      M    50.055418  38.609832      Arts    78.842213   \n",
       "4           4      F    49.980109  60.661264  Commerce    76.132861   \n",
       "\n",
       "  degree_type  work_experience  experience_years  employability_perc mba_spec  \\\n",
       "0    Sci&Tech            False                 0           67.267717   Mkt&HR   \n",
       "1   Comm&Mgmt            False                 1           73.089297   Mkt&HR   \n",
       "2    Sci&Tech            False                 1           74.090553   Mkt&HR   \n",
       "3   Comm&Mgmt             True                 0           95.951477   Mkt&HR   \n",
       "4   Comm&Mgmt            False                 0           55.252820   Mkt&HR   \n",
       "\n",
       "    mba_perc        salary  placed                    start_date  \\\n",
       "0  57.796472  26961.957338    True                           NaT   \n",
       "1  66.888349           NaN    True 2020-02-16 00:03:24.176280576   \n",
       "2  66.220386  17684.222919    True 2019-12-19 21:22:16.301072128   \n",
       "3  73.716787  32224.660930   False 2020-01-23 14:08:04.391622912   \n",
       "4  60.326783  28482.033544    True 2019-12-12 04:15:40.063726592   \n",
       "\n",
       "                       end_date duration  \n",
       "0 2020-03-30 11:29:56.959432960      NaN  \n",
       "1                           NaT      6.0  \n",
       "2 2020-12-08 09:33:28.105755136      6.0  \n",
       "3 2020-03-10 22:05:46.568782592      NaN  \n",
       "4 2020-10-19 10:05:23.907214336      NaN  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CTGAN Hyperparameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A part from the common Tabular Model arguments, `CTGAN` has a number of additional\n",
    "hyperparameters that control its learning behavior and can impact on the\n",
    "performance of the model, both in terms of quality of the generated data\n",
    "and computationa time.\n",
    "\n",
    "### epochs and batch size\n",
    "\n",
    "The first hyperparameters that we see are the `epochs` and `batch_size` arguments,\n",
    "which control the number of iterations that the model will perform to optimize\n",
    "its parameters, as well as the number of samples used in each step.\n",
    "\n",
    "Its default values are `300` and `500` respectively, and `batch_size` needs to\n",
    "always be a value which is multiple of `10`.\n",
    "\n",
    "These hyperparameters have a very direct effect in time the training process lasts,\n",
    "but also on the performance of the data.\n",
    "\n",
    "For new datasets, you might want to start by setting a low value on both of them\n",
    "to see how long the training process takes on your data and later on increase the number\n",
    "to acceptable values in order to improve the performance.\n",
    "\n",
    "### log_frequency\n",
    "\n",
    "Whether to use log frequency of categorical levels in conditional sampling.\n",
    "\n",
    "Defaults to `True`.\n",
    "\n",
    "This argument affects how the model processes the frequencies of the categorical\n",
    "values that are used to condition the rest of the values. In some cases,\n",
    "changing it to `False` could lead to better performance.\n",
    "\n",
    "### Neural Network dimensions\n",
    "\n",
    "`CTGAN` has the following hyperparameters that allow you to control the\n",
    "size of the different layers that compose its neural networks:\n",
    "\n",
    "- embedding_dim (int): Size of the random sample passed to the Generator. Defaults to 128.\n",
    "- gen_dim (tuple or list of ints): Size of the output samples for each one of the Residuals.\n",
    "  A Resiudal Layer will be created for each one of the values provided. Defaults to (256, 256).\n",
    "- dis_dim (tuple or list of ints): Size of the output samples for each one of the Discriminator\n",
    "  Layers. A Linear Layer will be created for each one of the values provided. Defaults to (256, 256).\n",
    "\n",
    "### l2scale\n",
    "\n",
    "The `l2scale` argument, which defaults to `1e-6`, sets the wheight Decay of the Adam Optimizer\n",
    "used to optimize the Neural Networks.\n",
    "\n",
    "### verbose\n",
    "\n",
    "Whether to print fit progress on stdout. Defaults to `False`.\n",
    "\n",
    "<div class=\"alert alert-warning\">\n",
    "    \n",
    "**WARNING**\n",
    "    \n",
    "The value that you set on the `batch_size` argument must always be\n",
    "a multiple of `10`!\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As an example, we will try to fit the `CTGAN` model slightly increasing the number of epochs,\n",
    "reducing the `batch_size`, adding one additional layer to the models involved and using a\n",
    "smaller wright decay.\n",
    "\n",
    "Before we start, we will evaluate the qualtiy of the previously generated data using the\n",
    "`sdv.evaluation.evaluate` function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-148.173551500529"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sdv.evaluation import evaluate\n",
    "\n",
    "evaluate(new_data, data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Afterwards, we create a new instance of the `CTGAN` model with the\n",
    "hyperparameter values that we want to use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = CTGAN(\n",
    "    primary_key='student_id',\n",
    "    epochs=500,\n",
    "    batch_size=100,\n",
    "    gen_dim=(256, 256, 256),\n",
    "    dis_dim=(256, 256, 256),\n",
    "    l2scale=1e-07\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And fit to our data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.fit(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we are ready to generate new data and evaluate the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_data = model.sample(len(data))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>student_id</th>\n",
       "      <th>gender</th>\n",
       "      <th>second_perc</th>\n",
       "      <th>high_perc</th>\n",
       "      <th>high_spec</th>\n",
       "      <th>degree_perc</th>\n",
       "      <th>degree_type</th>\n",
       "      <th>work_experience</th>\n",
       "      <th>experience_years</th>\n",
       "      <th>employability_perc</th>\n",
       "      <th>mba_spec</th>\n",
       "      <th>mba_perc</th>\n",
       "      <th>salary</th>\n",
       "      <th>placed</th>\n",
       "      <th>start_date</th>\n",
       "      <th>end_date</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>34.949775</td>\n",
       "      <td>56.543753</td>\n",
       "      <td>Science</td>\n",
       "      <td>56.386929</td>\n",
       "      <td>Others</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>57.047205</td>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>70.880870</td>\n",
       "      <td>52487.953908</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-02-11 14:51:51.540146176</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>M</td>\n",
       "      <td>60.293816</td>\n",
       "      <td>63.604466</td>\n",
       "      <td>Commerce</td>\n",
       "      <td>57.213664</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>76.443608</td>\n",
       "      <td>Mkt&amp;Fin</td>\n",
       "      <td>69.989944</td>\n",
       "      <td>49340.176244</td>\n",
       "      <td>False</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-08-22 07:51:09.761925888</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>M</td>\n",
       "      <td>65.549707</td>\n",
       "      <td>67.099558</td>\n",
       "      <td>Science</td>\n",
       "      <td>67.883755</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>63.329463</td>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>77.980852</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>M</td>\n",
       "      <td>31.861321</td>\n",
       "      <td>51.808897</td>\n",
       "      <td>Commerce</td>\n",
       "      <td>59.313310</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>False</td>\n",
       "      <td>4</td>\n",
       "      <td>91.136983</td>\n",
       "      <td>Mkt&amp;Fin</td>\n",
       "      <td>84.226341</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-07-21 22:16:00.456667392</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>F</td>\n",
       "      <td>78.827052</td>\n",
       "      <td>75.281691</td>\n",
       "      <td>Commerce</td>\n",
       "      <td>64.924865</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>68.389091</td>\n",
       "      <td>Mkt&amp;Fin</td>\n",
       "      <td>80.486051</td>\n",
       "      <td>51901.492908</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-01-25 13:18:42.237984512</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <td>210</td>\n",
       "      <td>M</td>\n",
       "      <td>67.010665</td>\n",
       "      <td>43.334043</td>\n",
       "      <td>Science</td>\n",
       "      <td>58.679588</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>89.946393</td>\n",
       "      <td>Mkt&amp;Fin</td>\n",
       "      <td>78.518156</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2020-10-02 00:22:02.203142656</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>211</th>\n",
       "      <td>211</td>\n",
       "      <td>M</td>\n",
       "      <td>60.100223</td>\n",
       "      <td>68.346138</td>\n",
       "      <td>Science</td>\n",
       "      <td>72.964973</td>\n",
       "      <td>Sci&amp;Tech</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>101.124253</td>\n",
       "      <td>Mkt&amp;Fin</td>\n",
       "      <td>76.647721</td>\n",
       "      <td>32727.642571</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-02-13 20:57:41.302214656</td>\n",
       "      <td>2021-01-03 03:54:04.681563904</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212</th>\n",
       "      <td>212</td>\n",
       "      <td>M</td>\n",
       "      <td>54.662673</td>\n",
       "      <td>56.751646</td>\n",
       "      <td>Commerce</td>\n",
       "      <td>60.198562</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>50.684929</td>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>66.078017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-03-01 10:52:01.466955776</td>\n",
       "      <td>2020-08-19 20:15:37.505603072</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>213</th>\n",
       "      <td>213</td>\n",
       "      <td>M</td>\n",
       "      <td>57.984654</td>\n",
       "      <td>51.599140</td>\n",
       "      <td>Science</td>\n",
       "      <td>69.113537</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>61.562135</td>\n",
       "      <td>Mkt&amp;HR</td>\n",
       "      <td>72.756443</td>\n",
       "      <td>39093.193199</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-02-08 20:32:23.699396864</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>214</th>\n",
       "      <td>214</td>\n",
       "      <td>M</td>\n",
       "      <td>75.410205</td>\n",
       "      <td>45.309435</td>\n",
       "      <td>Commerce</td>\n",
       "      <td>56.887853</td>\n",
       "      <td>Comm&amp;Mgmt</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>57.045367</td>\n",
       "      <td>Mkt&amp;Fin</td>\n",
       "      <td>55.734951</td>\n",
       "      <td>23783.166142</td>\n",
       "      <td>False</td>\n",
       "      <td>2020-01-07 07:47:50.705248000</td>\n",
       "      <td>NaT</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>215 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     student_id gender  second_perc  high_perc high_spec  degree_perc  \\\n",
       "0             0      F    34.949775  56.543753   Science    56.386929   \n",
       "1             1      M    60.293816  63.604466  Commerce    57.213664   \n",
       "2             2      M    65.549707  67.099558   Science    67.883755   \n",
       "3             3      M    31.861321  51.808897  Commerce    59.313310   \n",
       "4             4      F    78.827052  75.281691  Commerce    64.924865   \n",
       "..          ...    ...          ...        ...       ...          ...   \n",
       "210         210      M    67.010665  43.334043   Science    58.679588   \n",
       "211         211      M    60.100223  68.346138   Science    72.964973   \n",
       "212         212      M    54.662673  56.751646  Commerce    60.198562   \n",
       "213         213      M    57.984654  51.599140   Science    69.113537   \n",
       "214         214      M    75.410205  45.309435  Commerce    56.887853   \n",
       "\n",
       "    degree_type  work_experience  experience_years  employability_perc  \\\n",
       "0        Others             True                 0           57.047205   \n",
       "1     Comm&Mgmt            False                 1           76.443608   \n",
       "2     Comm&Mgmt            False                 0           63.329463   \n",
       "3     Comm&Mgmt            False                 4           91.136983   \n",
       "4     Comm&Mgmt            False                 1           68.389091   \n",
       "..          ...              ...               ...                 ...   \n",
       "210   Comm&Mgmt            False                 0           89.946393   \n",
       "211    Sci&Tech            False                 0          101.124253   \n",
       "212   Comm&Mgmt             True                 0           50.684929   \n",
       "213   Comm&Mgmt            False                 0           61.562135   \n",
       "214   Comm&Mgmt             True                 0           57.045367   \n",
       "\n",
       "    mba_spec   mba_perc        salary  placed                    start_date  \\\n",
       "0     Mkt&HR  70.880870  52487.953908   False 2020-02-11 14:51:51.540146176   \n",
       "1    Mkt&Fin  69.989944  49340.176244   False                           NaT   \n",
       "2     Mkt&HR  77.980852           NaN   False                           NaT   \n",
       "3    Mkt&Fin  84.226341           NaN   False                           NaT   \n",
       "4    Mkt&Fin  80.486051  51901.492908   False 2020-01-25 13:18:42.237984512   \n",
       "..       ...        ...           ...     ...                           ...   \n",
       "210  Mkt&Fin  78.518156           NaN   False                           NaT   \n",
       "211  Mkt&Fin  76.647721  32727.642571   False 2020-02-13 20:57:41.302214656   \n",
       "212   Mkt&HR  66.078017           NaN   False 2020-03-01 10:52:01.466955776   \n",
       "213   Mkt&HR  72.756443  39093.193199   False 2020-02-08 20:32:23.699396864   \n",
       "214  Mkt&Fin  55.734951  23783.166142   False 2020-01-07 07:47:50.705248000   \n",
       "\n",
       "                         end_date duration  \n",
       "0                             NaT      NaN  \n",
       "1   2020-08-22 07:51:09.761925888      3.0  \n",
       "2                             NaT      6.0  \n",
       "3   2020-07-21 22:16:00.456667392     12.0  \n",
       "4                             NaT      NaN  \n",
       "..                            ...      ...  \n",
       "210 2020-10-02 00:22:02.203142656      NaN  \n",
       "211 2021-01-03 03:54:04.681563904     12.0  \n",
       "212 2020-08-19 20:15:37.505603072     12.0  \n",
       "213                           NaT      NaN  \n",
       "214                           NaT      6.0  \n",
       "\n",
       "[215 rows x 17 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-153.27980312716866"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sdv.evaluation import evaluate\n",
    "\n",
    "evaluate(new_data, data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, in this case these modifications changed the obtained results slightly,\n",
    "but they did neither introduce dramatic changes in the performance."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
